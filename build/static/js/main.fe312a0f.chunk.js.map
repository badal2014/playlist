{"version":3,"sources":["assets/boy.png","assets/cd.png","assets/play-button.svg","assets/play-button empty.svg","assets/back.svg","assets/right-arrow.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentSong","data","songs","song","playList","currentSelectedPlayList","playlist","currentSongPLayList","count","playSong","animation","e","d","console","log","setState","target","id","slide","length","_this2","play","react_default","a","createElement","className","src","leftArrow","alt","onClick","slideContent","boyImg","Heading","Content","rightArrow","cdImg","map","key","changePlayList","year","currentSongplay","playBtn","emptyPlayIcon","duration","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe312a0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boy.50a353c1.png\";","module.exports = __webpack_public_path__ + \"static/media/cd.b1a126d9.png\";","module.exports = __webpack_public_path__ + \"static/media/play-button.372e6e01.svg\";","module.exports = __webpack_public_path__ + \"static/media/play-button empty.465777c3.svg\";","module.exports = __webpack_public_path__ + \"static/media/back.290174b6.svg\";","module.exports = __webpack_public_path__ + \"static/media/right-arrow.1ee4c3ee.svg\";","import React from 'react';\nimport './App.scss';\nimport data from './data.json';\nimport slide from './slider.json';\nimport boyImg from './assets/boy.png';\nimport cdImg from './assets/cd.png';\nimport playBtn from './assets/play-button.svg';\nimport emptyPlayIcon from './assets/play-button empty.svg';\nimport leftArrow from './assets/back.svg';\nimport rightArrow from './assets/right-arrow.svg';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentSong: data[0].songs[0].song,\n      playList: data[0],\n      currentSelectedPlayList: data[0].playlist,\n      currentSongPLayList: data[0].playlist,\n      count: 0,\n      playSong : \"autoPlay\",\n      animation: true\n    }\n  }\n  currentSongplay(e, d) {\n    console.log(\"e\", e.playlist, d.song);\n    this.setState({\n      currentSong: d.song,\n      currentSongPLayList: e.playlist\n    })\n  }\n  changePlayList(e) {\n    console.log(e);\n    this.setState({\n      currentSelectedPlayList: e.playlist,\n      playList: e\n    })\n  }\n  slideContent(e) {\n    // document.getElementById(\"animate\").classList.remove (\"animation\");\n    let id = e.target.id;\n    if (id === \"leftShift\") {\n      if (this.state.count > 0) {\n        // document.getElementById(\"animate\").classList.add (\"animation\");\n        this.setState({\n          count: this.state.count - 1\n        })\n      }\n    } else {\n      if (this.state.count < slide.length - 1){\n\n        this.setState({\n          count: this.state.count + 1\n        })\n      }\n    }\n  }\n \n  render() {\n    var play = this.state.playSong\n    console.log(play);\n    return (\n      <div>\n        {/* <audio src={takiTaki} controls/> */}\n        {/* <Sound url={takiTaki} /> */}\n        <div className=\"slider\">\n          <div className=\"sliderContent\">\n            <div className=\"col-md-6\">\n              <div className=\"leftArrow\">\n                <img src={leftArrow} alt=\"slidercontrol\" id=\"leftShift\" onClick={(e) => this.slideContent(e)} />\n              </div>\n              <img src={boyImg} alt=\"boy\"/>\n              <h1>CURT<br /><span>SHEARD</span></h1>\n            </div>\n            <div className=\"col-md-6 sliderRight\">\n              <div className={this.state.animation ? \"text animation\" : \"text animation\"} id=\"animate\">\n                <h2>{slide[this.state.count].Heading} </h2>\n                <p>{slide[this.state.count].Content}</p>\n                <div className=\"rightArrow\">\n                  <img src={rightArrow} alt=\"slidercontrol\" id=\"rightShift\" onClick={(e) => this.slideContent(e)} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"container-fluid\">\n          <div className=\"bottomApp\">\n            <div className=\"col-md-12\">\n              <div className=\"songPlaying\">\n                <div className=\"col-md-6 textCenter\">\n                  <img src={cdImg} alt=\"icon\" />\n                </div>\n                <div className=\"col-md-6 nowPlaying m-top-25\">\n                  <h2>Now playing</h2>\n                  <h3>{this.state.currentSongPLayList}</h3>\n                  <p>{this.state.currentSong}</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"playList m-top-20\">\n              <div className=\"col-md-6\">\n                <div className=\"playListmain\">\n                  <h4 className=\"m-top-0\">Discography</h4>\n                  {data.map((data, key) => (<p key={key} ><h4 className={this.state.currentSelectedPlayList === data.playlist ? \"fontW600 playListName\" : \"playListName\"} onClick={() => this.changePlayList(data)}>{data.playlist}</h4><div className=\"playListinfo\"><span>{data.year}</span><button className=\"listenBtn\">Listen</button><button className=\"buyBtn\">BUY</button></div></p>))}\n                </div>\n              </div>\n              <div className=\"col-md-6\">\n                <div className=\"songs\">\n                  <h3 className=\"m-top-0\">{this.state.currentSelectedPlayList}</h3>\n                  {this.state.playList.songs.map((d, key) => (<p key={key} className=\"cursorPointer\" onClick={() => this.currentSongplay(this.state.playList, d)}>{this.state.currentSong === d.song && this.state.playList.playlist === this.state.currentSongPLayList ? <img src={playBtn} alt=\"icon\" /> : <img src={emptyPlayIcon} alt=\"icon\" />}{d.song}<span>{d.duration}</span></p>))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}